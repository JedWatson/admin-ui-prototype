{
  "name": "azure-storage-legacy",
  "author": {
    "name": "Microsoft Corporation"
  },
  "contributors": [
    {
      "name": "Block, Glenn",
      "email": "gblock@microsoft.com"
    },
    {
      "name": "Cowlishaw, Mark",
      "email": "markcowl@microsoft.com"
    },
    {
      "name": "Dejardin, Louis",
      "email": "loudej@microsoft.com"
    },
    {
      "name": "Georgiev, Yavor",
      "email": "yavorg@microsoft.com"
    },
    {
      "name": "Janczuk, Tomasz",
      "email": "tjanczuk@microsoft.com"
    },
    {
      "name": "Rodrigues, Andre",
      "email": "andrerod@microsoft.com"
    },
    {
      "name": "Tavares, Chris",
      "email": "ctavares@microsoft.com"
    }
  ],
  "version": "0.9.7",
  "description": "Windows Azure Storage Client Library for node for back compat with older versions of node sdk",
  "tags": [
    "azure",
    "sdk"
  ],
  "keywords": [
    "node",
    "azure"
  ],
  "main": "./lib/storage.js",
  "engines": {
    "node": ">= 0.6.15"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "dependencies": {
    "azure-common": "0.9.5",
    "underscore": "1.4.x"
  },
  "homepage": "http://github.com/WindowsAzure/azure-sdk-for-node",
  "repository": {
    "type": "git",
    "url": "git@github.com:WindowsAzure/azure-sdk-for-node.git"
  },
  "bugs": {
    "url": "http://github.com/WindowsAzure/azure-sdk-for-node/issues"
  },
  "scripts": {
    "test": "npm -s run-script jshint"
  },
  "readme": "# Windows Azure SDK for Node.js - Legacy Storage\n\nThis project provides a Node.js package that lets you consume Azure storage services.\nThis package exists to provide back compatibility with previous versions of the azure\nsdk for node. New application should instead use <<TODO>>.\n\n- **Node.js version: 0.6.15 or higher**\n- **API version: 2013-03-01**\n\n## Features\n\n- Blob client\n- Table Store client\n- Queue client\n\n## How to Install\n\n```bash\nnpm install azure-storage-legacy\n```\n\n## How to Use\n\n## Usage\n\n### Table Storage\n\nTo ensure a table exists, call **createTableIfNotExists**:\n\n```Javascript\nvar tableService = storage.createTableService();\ntableService.createTableIfNotExists('tasktable', function(error){\n    if(!error){\n        // Table exists\n    }\n});\n```\nA new entity can be added by calling **insertEntity**:\n\n```Javascript\nvar tableService = storage.createTableService(),\n    task1 = {\n        PartitionKey : 'tasksSeattle',\n        RowKey: '1',\n        Description: 'Take out the trash',\n        DueDate: new Date(2011, 12, 14, 12)\n    };\ntableService.insertEntity('tasktable', task1, function(error){\n    if(!error){\n        // Entity inserted\n    }\n});\n```\n\nThe method **queryEntity** can then be used to fetch the entity that was just inserted:\n\n```Javascript\nvar tableService = storage.createTableService();\ntableService.queryEntity('tasktable', 'tasksSeattle', '1', function(error, serverEntity){\n    if(!error){\n        // Entity available in serverEntity variable\n    }\n});\n```\n\n## Blob Storage\n\nThe **createContainerIfNotExists** method can be used to create a\ncontainer in which to store a blob:\n\n```Javascript\nvar blobService = storage.createBlobService();\nblobService.createContainerIfNotExists('taskcontainer', {publicAccessLevel : 'blob'}, function(error){\n    if(!error){\n        // Container exists and is public\n    }\n});\n```\n\nTo upload a file (assuming it is called task1-upload.txt and it is placed in the same folder as the script below), the method **createBlob** can be used. This method will return a writable stream which can be writen to, for instance, through piping:\n\n```Javascript\nvar blobService = storage.createBlobService();\n\nfs.createReadStream('task1-upload.txt').pipe(blobService.createBlob('taskcontainer', 'task1', storage.Constants.BlobConstants.BlobTypes.BLOCK));\n```\n\nTo download the blob and write it to the file system, a similar **getBlob** method can be used:\n\n```Javascript\nvar blobService = storage.createBlobService();\n\nblobService.getBlob('taskcontainer', 'task1').pipe(fs.createWriteStream('task1-download.txt'));\n```\n\nTo create a SAS URL you can use the **getBlobUrl** method. Additionally you can use the **date** helper functions to easily create a SAS that expires at some point relative to the current time.\n\n```Javascript\nvar blobService = storage.createBlobService();\n\n//create a SAS that expires in an hour\nvar sharedAccessPolicy = {\n    AccessPolicy: {\n        Expiry: storage.date.minutesFromNow(60);\n    }\n};\n\nvar sasUrl = blobService.getBlobUrl(containerName, blobName, sharedAccessPolicy);\n```\n\n## Storage Queues\n\nThe **createQueueIfNotExists** method can be used to ensure a queue exists:\n\n```Javascript\nvar queueService = storage.createQueueService();\nqueueService.createQueueIfNotExists('taskqueue', function(error){\n    if(!error){\n        // Queue exists\n    }\n});\n```\n\nThe **createMessage** method can then be called to insert the message into the queue:\n\n```Javascript\nvar queueService = storage.createQueueService();\nqueueService.createMessage('taskqueue', 'Hello world!', function(error){\n    if(!error){\n        // Message inserted\n    }\n});\n```\n\nIt is then possible to call the **getMessage** method, process the message and then call **deleteMessage** inside the callback. This two-step process ensures messages don't get lost when they are removed from the queue.\n\n```Javascript\nvar queueService = storage.createQueueService(),\n    queueName = 'taskqueue';\nqueueService.getMessages(queueName, function(error, serverMessages){\n    if(!error){\n        // Process the message in less than 30 seconds, the message\n        // text is available in serverMessages[0].messagetext\n\n        queueService.deleteMessage(queueName, serverMessages[0].messageid, serverMessages[0].popreceipt, function(error){\n            if(!error){\n                // Message deleted\n            }\n        });\n    }\n});\n```\n\n## Related projects\n\n- [Windows Azure SDK for Node.js](https://github.com/WindowsAzure/azure-sdk-for-node)\n- [Windows Azure SDK for Node.js - Storage Blob](https://github.com/WindowsAzure/azure-sdk-for-node/tree/master/lib/services/blob)\n- [Windows Azure SDK for Node.js - Storage Table](https://github.com/WindowsAzure/azure-sdk-for-node/tree/master/lib/services/table)\n- [Windows Azure SDK for Node.js - Storage Queue](https://github.com/WindowsAzure/azure-sdk-for-node/tree/master/lib/services/queue)\n",
  "readmeFilename": "README.md",
  "_id": "azure-storage-legacy@0.9.7",
  "_from": "azure-storage-legacy@0.9.7"
}
